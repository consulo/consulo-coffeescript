/* The following code was generated by JFlex 1.4.3 on 26.11.13 11:50 */

package org.coffeebrew.lang.lexer;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.coffeebrew.lang.lexer.CoffeeScriptTokenTypes;
import java.util.Stack;

/**
 * The CoffeeScript lexer is responsible for generating a token stream of any CoffeeScript source file.
 *
 * @author Michael Kessler
 * @since 0.1.0
 */

public class CoffeeScriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYCLASSNAME = 28;
  public static final int YYSINGLEQUOTEHEREDOC = 14;
  public static final int YYDOUBLEQUOTEHEREDOC = 12;
  public static final int YYSINGLEQUOTESTRING = 10;
  public static final int YYREGEX = 16;
  public static final int YYHEREGEX = 18;
  public static final int YYIDENTIFIER = 2;
  public static final int YYINTERPOLATION = 24;
  public static final int YYDOUBLEQUOTESTRING = 8;
  public static final int YYJAVASCRIPT = 6;
  public static final int YYREGEXCHARACTERCLASS = 22;
  public static final int YYNUMBER = 4;
  public static final int YYINITIAL = 0;
  public static final int YYQUOTEPROPERTY = 26;
  public static final int YYREGEXFLAG = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\2\0\1\1\22\0\1\77\1\55\1\65\1\100"+
    "\1\10\1\60\1\51\1\66\1\72\1\73\1\60\1\21\1\76\1\16"+
    "\1\17\1\57\1\11\10\102\1\6\1\23\1\75\1\56\1\25\1\24"+
    "\1\54\1\64\6\15\10\7\1\50\1\47\7\7\1\13\2\7\1\70"+
    "\1\2\1\71\1\53\1\22\1\67\1\27\1\14\1\26\1\31\1\20"+
    "\1\32\1\103\1\44\1\37\1\5\1\63\1\34\1\45\1\36\1\40"+
    "\1\46\1\5\1\42\1\30\1\35\1\33\1\41\1\43\1\12\1\61"+
    "\1\5\1\74\1\52\1\101\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\4\1\5\1\4\1\7\1\10\1\4\1\11\1\4"+
    "\1\12\1\13\1\14\16\4\3\15\1\16\1\13\1\1"+
    "\1\17\1\4\1\16\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\1\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\40\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\2\60\2\61\1\62"+
    "\2\55\1\63\1\64\1\65\1\66\1\67\1\70\2\71"+
    "\1\72\1\55\1\73\1\74\1\75\1\76\1\55\1\77"+
    "\17\1\1\40\1\1\3\0\1\100\1\0\1\4\1\101"+
    "\1\102\1\103\4\4\1\0\1\13\1\104\6\4\1\16"+
    "\14\4\1\105\1\13\1\106\1\107\1\4\1\110\1\105"+
    "\1\15\5\4\1\0\1\111\1\0\1\112\1\4\2\0"+
    "\2\33\20\0\1\113\1\114\4\115\1\60\1\61\1\63"+
    "\1\71\1\33\1\116\1\74\1\117\1\0\1\120\21\0"+
    "\3\120\3\0\3\121\1\0\2\5\1\0\1\5\1\4"+
    "\1\122\15\4\1\15\6\4\1\123\3\4\1\124\1\4"+
    "\1\125\15\4\1\126\1\127\1\130\1\33\2\0\1\131"+
    "\27\0\1\114\3\115\1\132\1\63\1\133\1\74\23\0"+
    "\1\134\3\4\1\135\20\4\1\136\1\20\3\4\1\13"+
    "\2\4\1\137\1\4\1\0\1\33\1\0\1\140\21\0"+
    "\1\63\1\74\12\0\1\141\5\4\1\142\1\143\10\4"+
    "\1\144\1\145\3\4\1\146\1\0\1\33\12\0\1\63"+
    "\6\0\5\4\1\147\3\4\1\150\1\4\1\151\1\0"+
    "\1\152\12\0\1\153\5\4\1\154\2\4\1\152\5\0"+
    "\3\4\1\155\2\4\1\0\1\4\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\u0660\0\u03fc\0\u06a4\0\u06e8\0\u072c\0\u03fc\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0"+
    "\0\u0bf4\0\u06e8\0\u0c38\0\u0c7c\0\u0cc0\0\u06e8\0\u0d04\0\u03fc"+
    "\0\u03fc\0\u0d48\0\u0d8c\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u03fc"+
    "\0\u03fc\0\u03fc\0\u03fc\0\u0dd0\0\u03fc\0\u03fc\0\u0e14\0\u0e58"+
    "\0\u03fc\0\u0e9c\0\u03fc\0\u0ee0\0\u03fc\0\u03fc\0\u03fc\0\u03fc"+
    "\0\u03fc\0\u03fc\0\u03fc\0\u0f24\0\u0f68\0\u03fc\0\u0fac\0\u0ff0"+
    "\0\u03fc\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u03fc"+
    "\0\u11cc\0\u1210\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u03fc\0\u1254"+
    "\0\u1298\0\u03fc\0\u12dc\0\u03fc\0\u1320\0\u1364\0\u03fc\0\u13a8"+
    "\0\u03fc\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584"+
    "\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4"+
    "\0\u17e8\0\u0ee0\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980"+
    "\0\u19c4\0\u03fc\0\u03fc\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18"+
    "\0\u03fc\0\u03fc\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0"+
    "\0\u19c4\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c"+
    "\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u19c4"+
    "\0\u20ac\0\u20f0\0\u2134\0\u19c4\0\u2178\0\u21bc\0\u2200\0\u2244"+
    "\0\u2288\0\u22cc\0\u06e8\0\u03fc\0\u2310\0\u2354\0\u2398\0\u23dc"+
    "\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc"+
    "\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c"+
    "\0\u2860\0\u28a4\0\u28e8\0\u03fc\0\u292c\0\u03fc\0\u2970\0\u29b4"+
    "\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u03fc\0\u2b90"+
    "\0\u03fc\0\u2bd4\0\u03fc\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28"+
    "\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48"+
    "\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168"+
    "\0\u31ac\0\u31f0\0\u3234\0\u03fc\0\u3278\0\u3234\0\u32bc\0\u3300"+
    "\0\u3300\0\u193c\0\u3344\0\u182c\0\u3388\0\u33cc\0\u3410\0\u3454"+
    "\0\u3498\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u19c4\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850"+
    "\0\u19c4\0\u3894\0\u38d8\0\u391c\0\u04c8\0\u3960\0\u19c4\0\u39a4"+
    "\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4"+
    "\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u03fc\0\u03fc\0\u03fc\0\u3d18"+
    "\0\u3d5c\0\u3da0\0\u03fc\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4"+
    "\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114"+
    "\0\u4158\0\u419c\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334"+
    "\0\u4378\0\u43bc\0\u03fc\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510"+
    "\0\u4554\0\u4598\0\u45dc\0\u4620\0\u4664\0\u46a8\0\u46ec\0\u4730"+
    "\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950"+
    "\0\u4994\0\u49d8\0\u4a1c\0\u4a60\0\u3278\0\u3234\0\u4aa4\0\u4ae8"+
    "\0\u4b2c\0\u19c4\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4"+
    "\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4"+
    "\0\u4f28\0\u4f6c\0\u19c4\0\u19c4\0\u4fb0\0\u4ff4\0\u5038\0\u04c8"+
    "\0\u507c\0\u50c0\0\u19c4\0\u5104\0\u5148\0\u518c\0\u51d0\0\u03fc"+
    "\0\u5214\0\u5258\0\u529c\0\u52e0\0\u5324\0\u5368\0\u53ac\0\u53f0"+
    "\0\u5434\0\u5478\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610"+
    "\0\u5654\0\u5698\0\u03fc\0\u56dc\0\u5720\0\u5764\0\u57a8\0\u57ec"+
    "\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u19c4\0\u5984\0\u59c8"+
    "\0\u5a0c\0\u5a50\0\u5a94\0\u19c4\0\u19c4\0\u5ad8\0\u5b1c\0\u5b60"+
    "\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u19c4\0\u19c4\0\u5cf8"+
    "\0\u5d3c\0\u5d80\0\u19c4\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4"+
    "\0\u5f18\0\u5f5c\0\u5fa0\0\u5fe4\0\u6028\0\u606c\0\u60b0\0\u03fc"+
    "\0\u60f4\0\u6138\0\u617c\0\u61c0\0\u3124\0\u6204\0\u6248\0\u628c"+
    "\0\u62d0\0\u6314\0\u6358\0\u19c4\0\u639c\0\u63e0\0\u6424\0\u19c4"+
    "\0\u6468\0\u19c4\0\u64ac\0\u2464\0\u64f0\0\u6534\0\u6578\0\u65bc"+
    "\0\u6600\0\u6644\0\u6688\0\u66cc\0\u6710\0\u6754\0\u19c4\0\u6798"+
    "\0\u67dc\0\u6820\0\u6864\0\u68a8\0\u19c4\0\u68ec\0\u6930\0\u03fc"+
    "\0\u6974\0\u69b8\0\u69fc\0\u6a40\0\u6a84\0\u6ac8\0\u6b0c\0\u6b50"+
    "\0\u19c4\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u19c4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\22\1\21\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\24\1\26\1\31\1\26\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\3\24\2\26\1\60\1\61"+
    "\2\62\1\63\1\64\1\65\1\66\1\67\1\70\1\24"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\23\1\104\1\105\1\25\1\24"+
    "\1\20\1\106\1\107\1\106\1\110\11\20\1\111\1\112"+
    "\1\20\1\113\1\20\1\114\30\20\1\115\2\20\2\116"+
    "\7\20\1\117\1\120\1\121\1\122\1\20\1\102\1\123"+
    "\1\110\1\20\1\105\3\20\1\106\1\107\1\106\1\110"+
    "\11\20\1\111\1\124\1\20\1\113\1\20\1\114\33\20"+
    "\2\116\7\20\1\117\1\120\1\20\1\122\1\20\1\102"+
    "\1\123\1\110\1\20\1\105\2\20\67\125\1\126\14\125"+
    "\1\127\1\21\1\130\1\21\61\127\1\131\16\127\1\132"+
    "\1\21\1\130\1\21\62\132\1\131\15\132\1\133\1\21"+
    "\1\130\1\21\61\133\1\134\16\133\1\135\1\21\1\130"+
    "\1\21\62\135\1\136\15\135\1\137\1\140\1\141\1\140"+
    "\53\137\1\142\10\137\1\143\1\140\1\144\1\145\1\146"+
    "\4\137\1\147\2\137\1\150\1\21\1\130\1\21\53\150"+
    "\1\151\10\150\1\152\1\140\1\144\1\145\1\146\3\150"+
    "\1\153\1\147\2\150\1\140\1\154\1\140\1\154\13\140"+
    "\1\154\17\140\1\155\5\140\1\155\13\140\1\155\6\140"+
    "\1\154\6\140\1\154\3\140\1\155\1\156\1\140\1\141"+
    "\1\140\65\156\1\157\12\156\100\140\1\160\1\161\2\140"+
    "\3\20\1\0\10\20\1\162\2\20\1\33\1\163\5\20"+
    "\1\164\1\165\1\166\1\167\1\170\1\171\1\20\1\172"+
    "\1\173\1\174\1\175\1\20\1\176\1\177\15\20\1\200"+
    "\23\20\1\106\1\107\1\106\1\110\12\20\1\201\3\20"+
    "\1\202\46\20\1\121\3\20\1\123\1\110\4\20\107\0"+
    "\1\21\104\0\1\23\72\0\1\23\11\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\23\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\6\0\1\25\2\0\1\25"+
    "\5\0\1\204\1\205\61\0\1\25\6\0\1\206\4\26"+
    "\1\206\1\26\1\206\1\26\2\0\1\206\1\0\1\26"+
    "\1\203\2\0\21\206\2\26\10\0\1\206\1\0\1\206"+
    "\16\0\1\26\1\206\5\0\11\27\2\0\1\27\1\0"+
    "\1\27\3\0\23\27\10\0\1\27\1\0\1\27\16\0"+
    "\2\27\6\0\1\25\2\0\1\25\2\207\3\0\1\204"+
    "\1\205\61\0\1\25\6\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\14\24\1\210\6\24\10\0\1\211"+
    "\1\0\1\24\16\0\2\24\6\0\1\25\2\0\1\25"+
    "\12\0\1\212\1\213\54\0\1\25\6\0\5\24\1\214"+
    "\3\24\2\0\1\24\1\0\1\24\1\203\2\0\6\24"+
    "\1\215\1\24\1\216\12\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\25\0\1\213\63\0\11\24\2\0\1\24"+
    "\1\0\1\217\1\203\2\0\23\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\24\0\1\220\1\221\102\0\1\222"+
    "\1\221\63\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\1\24\1\223\4\24\1\224\3\24\1\225\10\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\10\24\1\226"+
    "\12\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\15\24"+
    "\1\227\5\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\230\1\0\1\24\1\203\2\0"+
    "\12\24\1\231\10\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\1\24\1\232\3\24\1\233\3\24\1\234\1\235"+
    "\10\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\10\24"+
    "\1\236\12\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\237\1\0\1\24\1\203\2\0"+
    "\23\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\14\24"+
    "\1\240\1\24\1\241\4\24\10\0\1\242\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\243\1\0\1\24"+
    "\1\203\2\0\1\24\1\244\3\24\1\245\4\24\1\246"+
    "\10\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\2\24"+
    "\1\247\1\24\1\250\3\24\1\251\6\24\1\252\3\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\4\24\1\253"+
    "\3\24\1\254\3\24\1\255\6\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\1\24\1\256\10\24\1\257\10\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\260\1\0\1\24\1\203\2\0\23\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\11\24\1\261\4\24"+
    "\1\262\4\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\25\0\1\213\23\0\1\62\57\0\1\213\24\0\1\62"+
    "\56\0\1\221\103\0\1\221\30\0\1\263\25\0\25\264"+
    "\1\213\31\264\1\265\17\264\1\266\4\264\5\0\11\24"+
    "\2\0\1\267\1\0\1\24\1\203\2\0\23\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\65\0\1\270\104\0"+
    "\1\271\15\0\3\272\1\0\74\272\1\273\3\272\3\0"+
    "\1\106\104\0\1\110\72\0\1\110\20\0\1\274\2\0"+
    "\1\275\1\276\5\0\1\277\1\300\1\301\1\302\1\303"+
    "\1\304\1\0\1\305\1\306\1\307\1\310\1\0\1\311"+
    "\1\312\15\0\1\313\45\0\1\314\77\0\1\315\64\0"+
    "\67\125\1\0\14\125\1\127\3\0\61\127\1\0\16\127"+
    "\1\316\1\0\1\316\1\21\5\316\1\317\1\320\20\316"+
    "\1\321\46\316\1\317\1\316\1\132\3\0\62\132\1\0"+
    "\15\132\1\133\3\0\101\133\3\0\61\133\1\322\16\133"+
    "\1\135\3\0\101\135\3\0\62\135\1\323\15\135\1\137"+
    "\3\0\53\137\1\0\10\137\5\0\4\137\1\0\2\137"+
    "\1\316\1\0\1\316\1\0\5\316\1\317\1\320\20\316"+
    "\1\321\46\316\1\317\1\316\37\0\1\324\5\0\1\324"+
    "\13\0\1\324\21\0\1\324\1\150\3\0\64\150\5\0"+
    "\3\150\2\0\3\150\3\0\53\150\1\325\10\150\5\0"+
    "\3\150\2\0\2\150\1\326\1\0\1\326\1\0\70\326"+
    "\1\327\7\326\37\0\1\330\5\0\1\330\13\0\1\330"+
    "\21\0\1\330\1\156\3\0\65\156\1\0\12\156\74\0"+
    "\1\331\51\0\1\332\16\0\1\333\34\0\1\334\21\0"+
    "\1\335\76\0\1\336\4\0\1\337\3\0\1\340\101\0"+
    "\1\341\110\0\1\342\60\0\1\343\17\0\1\333\72\0"+
    "\1\344\7\0\1\345\1\346\101\0\1\347\107\0\1\350"+
    "\1\0\1\351\14\0\1\352\42\0\1\353\12\0\1\354"+
    "\4\0\1\355\75\0\1\333\3\0\1\356\77\0\1\357"+
    "\3\0\1\333\3\0\1\333\61\0\1\360\127\0\1\361"+
    "\57\0\1\362\77\0\1\274\3\0\1\276\5\0\1\277"+
    "\1\300\1\301\1\302\1\303\1\304\1\0\1\305\1\306"+
    "\1\307\1\310\1\0\1\311\1\312\15\0\1\313\22\0"+
    "\1\363\1\364\1\363\1\364\12\363\1\365\4\363\1\366"+
    "\1\363\1\365\56\363\6\0\1\367\2\0\1\367\70\0"+
    "\1\367\7\0\1\370\2\0\1\370\4\0\1\371\2\0"+
    "\1\371\60\0\1\370\6\0\11\206\2\0\1\206\1\0"+
    "\1\206\1\203\2\0\23\206\10\0\1\206\1\0\1\206"+
    "\16\0\2\206\6\0\1\372\2\0\1\372\2\0\2\372"+
    "\2\0\1\372\5\0\2\372\1\0\2\372\47\0\1\372"+
    "\6\0\11\24\2\0\1\373\1\0\1\24\1\203\2\0"+
    "\23\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\374\2\0\23\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\7\24\1\375"+
    "\10\24\1\376\2\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\2\24\1\377\20\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\5\24\1\u0100\15\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\7\24\1\u0101\1\24\2\0"+
    "\1\u0102\1\0\1\24\1\203\2\0\2\24\1\u0103\6\24"+
    "\1\u0104\4\24\1\u0105\4\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\24\0\1\263\1\213\63\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\2\24\1\u0106\4\24"+
    "\1\u0107\13\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\203\2\0"+
    "\1\24\1\u0108\21\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\10\24\1\u0109\12\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\3\24\1\u010a\17\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\11\24\1\u010b\11\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\4\24\1\u010c\1\24\1\u010d"+
    "\14\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\6\24"+
    "\1\u010e\14\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\203\2\0"+
    "\10\24\1\u010f\12\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\10\24\1\u0110\12\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\14\24\1\u0111\6\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\3\24\1\u0112\2\24\1\u0113\1\u0114"+
    "\13\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\7\24"+
    "\1\u0115\13\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\203\2\0"+
    "\5\24\1\u0116\15\24\10\0\1\u0117\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\u0118\1\0\1\24\1\203"+
    "\2\0\11\24\1\u0119\2\24\1\u011a\6\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\20\24\1\u011b\2\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\15\24\1\231\5\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\7\24\1\u011c"+
    "\13\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\6\24"+
    "\1\u011d\14\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\374\2\0"+
    "\7\24\1\231\13\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\10\24\1\u011e\12\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\374\2\0\2\24\1\u011f\20\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\20\24\1\376\2\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\374\2\0\4\24\1\254\16\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\374\1\0\1\213\23\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\14\24\1\u0115\6\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\11\24\1\u0120"+
    "\11\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\7\24"+
    "\1\u0121\13\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\203\2\0"+
    "\7\24\1\u0122\13\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\u0123\1\0\1\24\1\203"+
    "\2\0\11\24\1\u0124\11\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\57\0\1\u0125\123\0\1\266\11\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\2\24\1\254"+
    "\20\24\10\0\1\24\1\0\1\24\16\0\2\24\65\0"+
    "\1\u0126\104\0\1\u0127\15\0\3\272\1\0\103\272\1\0"+
    "\74\272\1\u0128\3\272\42\0\1\u0129\16\0\1\u012a\41\0"+
    "\1\u012b\76\0\1\u012c\21\0\1\u012d\76\0\1\u012e\4\0"+
    "\1\u012f\3\0\1\u0130\101\0\1\u0131\110\0\1\u0132\60\0"+
    "\1\u0133\17\0\1\u012a\72\0\1\u0134\7\0\1\u0135\1\u0136"+
    "\101\0\1\u0137\107\0\1\u0138\1\0\1\u0139\14\0\1\u013a"+
    "\42\0\1\u013b\12\0\1\u013c\4\0\1\u013d\75\0\1\u012a"+
    "\3\0\1\u013e\77\0\1\u013f\3\0\1\u012a\3\0\1\u012a"+
    "\61\0\1\u0140\127\0\1\u0141\57\0\1\u0142\102\0\1\u0143"+
    "\75\0\1\u0144\70\0\1\u0144\7\0\1\u0145\2\0\1\u0145"+
    "\2\0\2\u0145\2\0\1\u0145\5\0\2\u0145\1\0\2\u0145"+
    "\47\0\1\u0145\7\0\1\u0146\2\0\1\u0146\2\0\2\u0146"+
    "\2\0\1\u0146\5\0\2\u0146\1\0\2\u0146\47\0\1\u0146"+
    "\1\0\1\133\3\0\61\133\1\u0147\16\133\1\135\3\0"+
    "\62\135\1\u0147\15\135\37\0\1\u0148\5\0\1\u0148\13\0"+
    "\1\u0148\21\0\1\u0148\1\150\3\0\53\150\1\u0149\10\150"+
    "\5\0\3\150\2\0\2\150\1\326\1\0\1\326\1\0"+
    "\70\326\1\0\7\326\37\0\1\u014a\5\0\1\u014a\13\0"+
    "\1\u014a\21\0\1\u014a\20\0\1\u014b\120\0\1\u014c\76\0"+
    "\1\u014d\110\0\1\u014e\75\0\1\u014f\112\0\1\u0150\76\0"+
    "\1\333\111\0\1\336\100\0\1\u0151\103\0\1\335\105\0"+
    "\1\u0152\107\0\1\333\72\0\1\u0153\2\0\1\u0154\1\u0155"+
    "\101\0\1\u014d\25\0\1\333\42\0\1\u0156\16\0\1\362"+
    "\2\0\1\u0157\107\0\1\u0158\100\0\1\333\74\0\1\u0159"+
    "\104\0\1\333\76\0\1\u015a\105\0\1\333\106\0\1\u015b"+
    "\66\0\1\u0156\16\0\1\u015c\74\0\1\333\53\0\1\366"+
    "\1\0\1\366\1\0\12\366\1\u015d\6\366\1\u015d\57\366"+
    "\1\0\1\366\1\0\12\366\1\u015d\5\366\1\u015e\1\u015d"+
    "\56\366\6\0\1\367\2\0\1\367\6\0\1\205\61\0"+
    "\1\367\7\0\1\370\2\0\1\370\70\0\1\370\6\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\1\24"+
    "\1\u015f\21\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\u0160\1\0\1\24\1\203\2\0"+
    "\23\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\12\24"+
    "\1\u0161\10\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\u0162\1\0\1\24\1\203\2\0"+
    "\23\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\17\24"+
    "\1\u0115\3\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\203\2\0"+
    "\11\24\1\u0163\11\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\5\24\1\u0164\3\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\23\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\6\24\1\u0165\14\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\10\24\1\u0166\12\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\1\24\1\u0167\21\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\u0115\1\0\1\24\1\203\2\0\23\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\1\u0168\22\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\2\24\1\u0169\20\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\2\24\1\237\4\24"+
    "\1\u016a\13\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\203\2\0"+
    "\7\24\1\u016b\13\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\1\24\1\u016c\21\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\u016d\1\0\1\24"+
    "\1\203\2\0\23\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\2\24\1\u0116\20\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\1\u016e\22\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\1\24\1\u016f\21\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\u0170\1\0"+
    "\1\24\1\203\2\0\23\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\u0171\1\0\1\24"+
    "\1\203\2\0\23\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\11\24\1\u0172\11\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\254\1\0\1\24"+
    "\1\203\2\0\23\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\10\24\1\u0173\12\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\2\24\1\u0174\20\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\12\24\1\u0175\10\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\u0176"+
    "\1\0\1\24\1\203\2\0\23\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\11\24\1\u0177\11\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\6\24\1\254\14\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\7\24\1\u0178\13\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\7\24\1\u0179"+
    "\13\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\3\24"+
    "\1\u0115\17\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\203\2\0"+
    "\5\24\1\u017a\15\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\16\24\1\u0115\4\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\10\24\1\u017b\12\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\6\24\1\u017c\14\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\3\u0128\1\u017d\74\u0128\1\u017e"+
    "\3\u0128\20\0\1\u017f\63\0\5\u0180\3\0\1\u0180\5\0"+
    "\2\u0180\1\0\5\u0180\23\0\10\u0180\1\0\1\u0180\1\0"+
    "\16\u0180\37\0\1\u0181\76\0\1\u0182\110\0\1\u0183\75\0"+
    "\1\u0184\112\0\1\u0185\76\0\1\u012a\111\0\1\u012e\100\0"+
    "\1\u0186\103\0\1\u012d\105\0\1\u0187\107\0\1\u012a\72\0"+
    "\1\u0188\2\0\1\u0189\1\u018a\101\0\1\u0182\25\0\1\u012a"+
    "\42\0\1\u018b\16\0\1\u0142\2\0\1\u018c\107\0\1\u018d"+
    "\100\0\1\u012a\74\0\1\u018e\47\0\5\u0180\3\0\1\u0180"+
    "\5\0\2\u0180\1\0\5\u0180\7\0\1\u012a\13\0\10\u0180"+
    "\1\0\1\u0180\1\0\16\u0180\2\0\5\u0180\3\0\1\u0180"+
    "\5\0\2\u0180\1\0\5\u0180\2\0\1\u018f\20\0\10\u0180"+
    "\1\0\1\u0180\1\0\16\u0180\2\0\5\u0180\3\0\1\u0180"+
    "\5\0\2\u0180\1\0\5\u0180\4\0\1\u012a\16\0\10\u0180"+
    "\1\0\1\u0180\1\0\16\u0180\37\0\1\u0190\66\0\1\u018b"+
    "\16\0\1\u0191\74\0\1\u012a\64\0\1\316\70\0\1\316"+
    "\7\0\1\316\2\0\1\316\2\0\2\316\2\0\1\316"+
    "\5\0\2\316\1\0\2\316\47\0\1\316\7\0\1\320"+
    "\2\0\1\320\2\0\2\320\2\0\1\320\5\0\2\320"+
    "\1\0\2\320\47\0\1\320\1\0\1\u0147\1\0\1\u0147"+
    "\1\0\100\u0147\37\0\1\u0192\5\0\1\u0192\13\0\1\u0192"+
    "\21\0\1\u0192\1\u0149\1\0\1\u0149\1\0\100\u0149\37\0"+
    "\1\u0193\5\0\1\u0193\13\0\1\u0193\21\0\1\u0193\27\0"+
    "\1\u0194\74\0\1\u0195\103\0\1\333\111\0\1\u0196\105\0"+
    "\1\362\110\0\1\u0197\66\0\1\u0198\112\0\1\u0199\74\0"+
    "\1\u019a\103\0\1\u014f\122\0\1\u0159\102\0\1\333\105\0"+
    "\1\353\63\0\1\u019b\117\0\1\333\104\0\1\u019c\101\0"+
    "\1\u019d\104\0\1\u014d\54\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\23\24\10\0\1\24\1\0\1\u019e"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\10\24\1\u019f\12\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\14\24\1\237\6\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\10\24\1\u0120\12\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\7\24\1\u01a0\13\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\11\24\1\u01a1"+
    "\11\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\3\24"+
    "\1\u01a2\17\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\203\2\0"+
    "\2\24\1\u01a3\20\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\16\24\1\u01a4\4\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\2\24\1\u01a5\20\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\11\24\1\u01a6\11\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\1\u01a7\22\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\5\24\1\u01a8\15\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\7\24\1\u01a9\13\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\7\24\1\u01aa"+
    "\13\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\6\24"+
    "\1\u01ab\14\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\203\2\0"+
    "\4\24\1\u01ac\16\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\2\24\1\u01ad\20\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\6\24\1\u01ae\14\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\15\24\1\u01af\5\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\12\24\1\u01b0\10\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\13\24\1\u0106\7\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\1\24\1\u01b1"+
    "\21\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\14\24"+
    "\1\u01b2\6\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\u01b3\1\0\1\24\1\203\2\0"+
    "\23\24\10\0\1\24\1\0\1\24\16\0\2\24\100\u017d"+
    "\1\u01b4\3\u017d\3\272\1\0\74\272\1\u01b5\3\272\27\0"+
    "\1\u01b6\74\0\1\u01b7\103\0\1\u012a\111\0\1\u01b8\105\0"+
    "\1\u0142\110\0\1\u01b9\66\0\1\u01ba\112\0\1\u01bb\74\0"+
    "\1\u01bc\103\0\1\u0184\122\0\1\u018e\102\0\1\u012a\105\0"+
    "\1\u013b\63\0\1\u01bd\117\0\1\u012a\104\0\1\u01be\101\0"+
    "\1\u01bf\104\0\1\u0182\106\0\1\u01c0\5\0\1\u01c0\13\0"+
    "\1\u01c0\21\0\1\u01c0\63\0\1\333\56\0\1\u01c1\111\0"+
    "\1\333\76\0\1\u01c2\101\0\1\u014d\102\0\1\u01c3\101\0"+
    "\1\u01c4\111\0\1\u01c5\72\0\1\u01c6\116\0\1\u0156\46\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\3\24"+
    "\1\u01c7\17\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\u01c8\1\0\1\24\1\203\2\0"+
    "\23\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\1\u0106"+
    "\22\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\u01c9\1\0\1\24\1\203\2\0\23\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\21\24\1\u01ca"+
    "\1\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\10\24"+
    "\1\u01cb\12\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\203\2\0"+
    "\16\24\1\u01cc\4\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\6\24\1\237\14\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\231\1\0\1\24"+
    "\1\203\2\0\23\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\11\24\1\u01cd\11\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\6\24\1\u01ce\14\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\11\24\1\u01cf\11\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\2\24\1\u01d0\20\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\4\24\1\231\16\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\10\24\1\u01d1"+
    "\12\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\10\24"+
    "\1\u01d2\12\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\100\0\1\u01d3\3\0\3\272\1\0\74\272\1\u01d4\3\272"+
    "\63\0\1\u012a\56\0\1\u01d5\111\0\1\u012a\76\0\1\u01d6"+
    "\101\0\1\u0182\102\0\1\u01d7\101\0\1\u01d8\111\0\1\u01d9"+
    "\72\0\1\u01da\116\0\1\u018b\72\0\1\362\110\0\1\u01db"+
    "\101\0\1\u01dc\106\0\1\u01dd\102\0\1\u01de\52\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\2\24\1\u01df"+
    "\20\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\10\24"+
    "\1\u01e0\12\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\5\24\1\u01e1\3\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\23\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\203"+
    "\2\0\14\24\1\u01e2\6\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\5\24\1\u01e3\15\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\12\24\1\u01e4\10\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\23\24\10\0\1\u01e5\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\10\24\1\u01e6\12\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\1\u01e7\22\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\100\0\1\u01e8\34\0\1\u0142"+
    "\110\0\1\u01e9\101\0\1\u01ea\106\0\1\u01eb\76\0\1\u012a"+
    "\107\0\1\u01ec\100\0\1\u014d\131\0\1\333\60\0\1\u01ed"+
    "\73\0\1\u0158\62\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\203\2\0\3\24\1\u01ee\17\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\22\24\1\u01ef\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\12\24\1\u01f0\10\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\u01f1"+
    "\1\0\1\24\1\203\2\0\23\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\10\24\1\u0115\12\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\u01f2"+
    "\1\0\1\24\1\203\2\0\23\24\10\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\u01f3\1\0"+
    "\1\24\1\203\2\0\23\24\10\0\1\24\1\0\1\24"+
    "\16\0\2\24\33\0\1\u0182\131\0\1\u012a\60\0\1\u01f4"+
    "\73\0\1\u018d\75\0\1\341\70\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\203\2\0\2\24\1\u0115\20\24\10\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\203\2\0\4\24\1\u0115\16\24"+
    "\10\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\203\2\0\20\24\1\u0115"+
    "\2\24\10\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\203\2\0\3\24"+
    "\1\254\17\24\10\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\203\2\0"+
    "\12\24\1\u01f5\10\24\10\0\1\24\1\0\1\24\16\0"+
    "\2\24\20\0\1\u0131\70\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\203\2\0\4\24\1\u01f6\16\24\10\0\1\24"+
    "\1\0\1\24\16\0\2\24";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27812];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\2\11\11\1\1\11\3\1\1\11\30\1\2\11"+
    "\2\1\10\11\1\1\2\11\2\1\1\11\1\1\1\11"+
    "\1\1\7\11\2\1\1\11\2\1\1\11\6\1\1\11"+
    "\2\1\5\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\21\1\3\0\1\1\1\0\2\1\2\11"+
    "\4\1\1\0\2\11\40\1\1\0\1\11\1\0\2\1"+
    "\2\0\2\1\20\0\1\11\1\1\1\11\10\1\1\11"+
    "\1\1\1\11\1\0\1\11\21\0\3\1\3\0\1\1"+
    "\1\11\1\1\1\0\2\1\1\0\53\1\3\11\1\1"+
    "\2\0\1\11\27\0\1\11\7\1\23\0\37\1\1\0"+
    "\1\1\1\0\1\11\21\0\1\1\1\11\12\0\26\1"+
    "\1\0\1\1\12\0\1\11\6\0\14\1\1\0\1\1"+
    "\12\0\11\1\1\11\5\0\6\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

  private IElementType characterClassType;

  private final Stack<Integer> stack = new Stack<Integer>();

  /**
   * Push the actual state on top of the stack
   */
  private void pushState() {
    stack.push(yystate());
  }

  /**
   * Push the actual state on top of the stack
   * and change into another state
   *
   * @param state The new state
   */
  private void pushStateAndBegin(int state) {
    stack.push(yystate());
    yybegin(state);
  }

  /**
   * Pop the last state from the stack and change to it.
   * If the stack is empty, go to YYINITIAL
   */
  private void popState() {
    if (!stack.empty()) {
      yybegin(stack.pop());
    } else {
      yybegin(YYINITIAL);
    }
  }

  /**
   * Push the stream back to the position before the text match
   *
   * @param text The text to match
   * @return true when matched
   */
  private boolean pushBackTo(String text) {
    final int position = yytext().toString().indexOf(text);

    if (position != -1) {
      yypushback(yylength() - position);
      return true;
    }

    return false;
  }

  /**
   * Push the stream back to the position before the text match
   * and change into the given state
   *
   * @param text The text to match
   * @param state The new state
   * @return true when matched
   */
  private boolean pushBackAndState(String text, int state) {
    final boolean success = pushBackTo(text);

    if (success) {
      pushStateAndBegin(state);
    }

    return success;
  }



  public CoffeeScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CoffeeScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return CoffeeScriptTokenTypes.MINUS;
          }
        case 111: break;
        case 36: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.MATH;
          }
        case 112: break;
        case 61: 
          { return characterClassType;
          }
        case 113: break;
        case 86: 
          { yybegin(YYHEREGEX);
                                return CoffeeScriptTokenTypes.HEREGEX_START;
          }
        case 114: break;
        case 80: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.IDENTIFIER;
          }
        case 115: break;
        case 68: 
          { return CoffeeScriptTokenTypes.FUNCTION_BIND;
          }
        case 116: break;
        case 50: 
          { return CoffeeScriptTokenTypes.REGEX;
          }
        case 117: break;
        case 6: 
          { yybegin(YYIDENTIFIER);
                                return CoffeeScriptTokenTypes.CONSTANT;
          }
        case 118: break;
        case 14: 
          { return CoffeeScriptTokenTypes.UNARY;
          }
        case 119: break;
        case 82: 
          { yypushback(1);
                                return CoffeeScriptTokenTypes.IDENTIFIER;
          }
        case 120: break;
        case 24: 
          { pushState();
                                return CoffeeScriptTokenTypes.BRACE_START;
          }
        case 121: break;
        case 65: 
          { return CoffeeScriptTokenTypes.BY;
          }
        case 122: break;
        case 57: 
          { pushBackTo("///");
                                if (yylength() != 0) {
                                  return CoffeeScriptTokenTypes.HEREGEX;
                                }
          }
        case 123: break;
        case 29: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.TERMINATOR;
          }
        case 124: break;
        case 17: 
          { yybegin(YYDOUBLEQUOTESTRING);
                                return CoffeeScriptTokenTypes.STRING_LITERAL;
          }
        case 125: break;
        case 88: 
          { yybegin(YYSINGLEQUOTEHEREDOC);
                                return CoffeeScriptTokenTypes.HEREDOC_START;
          }
        case 126: break;
        case 102: 
          { return CoffeeScriptTokenTypes.WHILE;
          }
        case 127: break;
        case 12: 
          { return CoffeeScriptTokenTypes.EQUAL;
          }
        case 128: break;
        case 46: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.STRING_LITERAL;
          }
        case 129: break;
        case 105: 
          { return CoffeeScriptTokenTypes.RETURN;
          }
        case 130: break;
        case 34: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.COLON;
          }
        case 131: break;
        case 49: 
          { pushBackTo("'''");
                                return CoffeeScriptTokenTypes.HEREDOC;
          }
        case 132: break;
        case 104: 
          { return CoffeeScriptTokenTypes.UNLESS;
          }
        case 133: break;
        case 10: 
          { return CoffeeScriptTokenTypes.COLON;
          }
        case 134: break;
        case 95: 
          { return CoffeeScriptTokenTypes.WHEN;
          }
        case 135: break;
        case 48: 
          { if (!pushBackAndState("#{", YYINTERPOLATION)) {
                                  pushBackTo("\"\"\"");
                                }
                                if (yylength() != 0) {
                                  return CoffeeScriptTokenTypes.HEREDOC;
                                }
          }
        case 136: break;
        case 38: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.BRACKET_END;
          }
        case 137: break;
        case 103: 
          { return CoffeeScriptTokenTypes.SWITCH;
          }
        case 138: break;
        case 97: 
          { return CoffeeScriptTokenTypes.BREAK;
          }
        case 139: break;
        case 108: 
          { return CoffeeScriptTokenTypes.FINALLY;
          }
        case 140: break;
        case 32: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.DOT;
          }
        case 141: break;
        case 3: 
          { return CoffeeScriptTokenTypes.WHITE_SPACE;
          }
        case 142: break;
        case 75: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.PROTOTYPE;
          }
        case 143: break;
        case 56: 
          { return CoffeeScriptTokenTypes.REGEX_BRACE_END;
          }
        case 144: break;
        case 78: 
          { yypushback(2);
                                pushStateAndBegin(YYINTERPOLATION);
          }
        case 145: break;
        case 4: 
          { yybegin(YYIDENTIFIER);
                                return CoffeeScriptTokenTypes.IDENTIFIER;
          }
        case 146: break;
        case 8: 
          { return CoffeeScriptTokenTypes.DOT;
          }
        case 147: break;
        case 9: 
          { return CoffeeScriptTokenTypes.PLUS;
          }
        case 148: break;
        case 43: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.JAVASCRIPT_LITERAL;
          }
        case 149: break;
        case 41: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.COMMA;
          }
        case 150: break;
        case 69: 
          { return CoffeeScriptTokenTypes.BOOL;
          }
        case 151: break;
        case 1: 
          { stack.clear();
                                yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.BAD_CHARACTER;
          }
        case 152: break;
        case 54: 
          { return CoffeeScriptTokenTypes.REGEX_PARENTHESIS_END;
          }
        case 153: break;
        case 98: 
          { return CoffeeScriptTokenTypes.CATCH;
          }
        case 154: break;
        case 26: 
          { return CoffeeScriptTokenTypes.COMMA;
          }
        case 155: break;
        case 74: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return CoffeeScriptTokenTypes.MATH;
          }
        case 156: break;
        case 15: 
          { return CoffeeScriptTokenTypes.MATH;
          }
        case 157: break;
        case 106: 
          { return CoffeeScriptTokenTypes.BLOCK_COMMENT;
          }
        case 158: break;
        case 87: 
          { yybegin(YYDOUBLEQUOTEHEREDOC);
                                return CoffeeScriptTokenTypes.HEREDOC_START;
          }
        case 159: break;
        case 60: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.REGEX_FLAG;
          }
        case 160: break;
        case 11: 
          { return CoffeeScriptTokenTypes.COMPARE;
          }
        case 161: break;
        case 81: 
          { pushBackTo(":");
                                return CoffeeScriptTokenTypes.OBJECT_KEY;
          }
        case 162: break;
        case 13: 
          { return CoffeeScriptTokenTypes.LOGIC;
          }
        case 163: break;
        case 77: 
          { return CoffeeScriptTokenTypes.ESCAPE_SEQUENCE;
          }
        case 164: break;
        case 96: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(YYQUOTEPROPERTY);
                                yypushback(yylength());
          }
        case 165: break;
        case 107: 
          { return CoffeeScriptTokenTypes.EXTENDS;
          }
        case 166: break;
        case 23: 
          { return CoffeeScriptTokenTypes.PARENTHESIS_END;
          }
        case 167: break;
        case 42: 
          { return CoffeeScriptTokenTypes.JAVASCRIPT;
          }
        case 168: break;
        case 51: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(YYREGEXFLAG);
                                return CoffeeScriptTokenTypes.REGEX_END;
          }
        case 169: break;
        case 67: 
          { return CoffeeScriptTokenTypes.COMPOUND_ASSIGN;
          }
        case 170: break;
        case 110: 
          { return CoffeeScriptTokenTypes.INSTANCE_OF;
          }
        case 171: break;
        case 109: 
          { return CoffeeScriptTokenTypes.CONTINUE;
          }
        case 172: break;
        case 99: 
          { return CoffeeScriptTokenTypes.CLASS;
          }
        case 173: break;
        case 2: 
          { return CoffeeScriptTokenTypes.TERMINATOR;
          }
        case 174: break;
        case 91: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { yybegin(YYREGEXFLAG);
                                return CoffeeScriptTokenTypes.HEREGEX_END;
          }
        case 175: break;
        case 47: 
          { return CoffeeScriptTokenTypes.STRING;
          }
        case 176: break;
        case 19: 
          { yybegin(YYJAVASCRIPT);
                                return CoffeeScriptTokenTypes.JAVASCRIPT_LITERAL;
          }
        case 177: break;
        case 35: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.EXIST;
          }
        case 178: break;
        case 25: 
          { return CoffeeScriptTokenTypes.SEMICOLON;
          }
        case 179: break;
        case 44: 
          { pushBackAndState("#{", YYINTERPOLATION);
                                if (yylength() != 0) {
                                  return CoffeeScriptTokenTypes.STRING;
                                }
          }
        case 180: break;
        case 21: 
          { return CoffeeScriptTokenTypes.BRACKET_END;
          }
        case 181: break;
        case 52: 
          { characterClassType = CoffeeScriptTokenTypes.REGEX;
                                pushStateAndBegin(YYREGEXCHARACTERCLASS);
                                return CoffeeScriptTokenTypes.REGEX_BRACKET_START;
          }
        case 182: break;
        case 37: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.BRACKET_START;
          }
        case 183: break;
        case 66: 
          { return CoffeeScriptTokenTypes.FUNCTION;
          }
        case 184: break;
        case 64: 
          { yybegin(YYCLASSNAME);
                                return CoffeeScriptTokenTypes.CLASS_NAME;
          }
        case 185: break;
        case 73: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(YYREGEX);
                                return CoffeeScriptTokenTypes.REGEX_START;
          }
        case 186: break;
        case 71: 
          { return CoffeeScriptTokenTypes.IN;
          }
        case 187: break;
        case 45: 
          { yypushback(yytext().length());
                                yybegin(YYINITIAL);
          }
        case 188: break;
        case 27: 
          { return CoffeeScriptTokenTypes.LINE_COMMENT;
          }
        case 189: break;
        case 83: 
          { return CoffeeScriptTokenTypes.FOR;
          }
        case 190: break;
        case 63: 
          { popState();
                                return CoffeeScriptTokenTypes.INTERPOLATION_END;
          }
        case 191: break;
        case 62: 
          { popState();
                                return CoffeeScriptTokenTypes.REGEX_BRACKET_END;
          }
        case 192: break;
        case 58: 
          { characterClassType = CoffeeScriptTokenTypes.HEREGEX;
                                pushStateAndBegin(YYREGEXCHARACTERCLASS);
                                return CoffeeScriptTokenTypes.REGEX_BRACKET_START;
          }
        case 193: break;
        case 5: 
          { yybegin(YYNUMBER);
                                return CoffeeScriptTokenTypes.NUMBER;
          }
        case 194: break;
        case 93: 
          { return CoffeeScriptTokenTypes.ELSE;
          }
        case 195: break;
        case 30: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.WHITE_SPACE;
          }
        case 196: break;
        case 22: 
          { return CoffeeScriptTokenTypes.PARENTHESIS_START;
          }
        case 197: break;
        case 72: 
          { return CoffeeScriptTokenTypes.OF;
          }
        case 198: break;
        case 94: 
          { return CoffeeScriptTokenTypes.THEN;
          }
        case 199: break;
        case 92: 
          { if (pushBackTo("::")) {
                                  yybegin(YYCLASSNAME);
                                  return CoffeeScriptTokenTypes.CLASS_NAME;
                                }
                                pushBackTo(":");
                                return CoffeeScriptTokenTypes.FUNCTION_NAME;
          }
        case 200: break;
        case 90: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.HEREDOC_END;
          }
        case 201: break;
        case 53: 
          { return CoffeeScriptTokenTypes.REGEX_PARENTHESIS_START;
          }
        case 202: break;
        case 84: 
          { return CoffeeScriptTokenTypes.ERROR_ELEMENT;
          }
        case 203: break;
        case 20: 
          { return CoffeeScriptTokenTypes.BRACKET_START;
          }
        case 204: break;
        case 18: 
          { yybegin(YYSINGLEQUOTESTRING);
                                return CoffeeScriptTokenTypes.STRING_LITERAL;
          }
        case 205: break;
        case 40: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.PARENTHESIS_END;
          }
        case 206: break;
        case 85: 
          { return CoffeeScriptTokenTypes.TRY;
          }
        case 207: break;
        case 16: 
          { return CoffeeScriptTokenTypes.THIS;
          }
        case 208: break;
        case 59: 
          { yybegin(YYINITIAL);
                                yypushback(1);
          }
        case 209: break;
        case 79: 
          { pushStateAndBegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.INTERPOLATION_START;
          }
        case 210: break;
        case 28: 
          { popState();
                                if (yystate() == YYINITIAL) {
                                  return CoffeeScriptTokenTypes.BRACE_END;
                                } else {
                                  yypushback(1);
                                }
          }
        case 211: break;
        case 33: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.PLUS;
          }
        case 212: break;
        case 39: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.PARENTHESIS_START;
          }
        case 213: break;
        case 101: 
          { return CoffeeScriptTokenTypes.THROW;
          }
        case 214: break;
        case 55: 
          { return CoffeeScriptTokenTypes.REGEX_BRACE_START;
          }
        case 215: break;
        case 31: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.MINUS;
          }
        case 216: break;
        case 76: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.RANGE;
          }
        case 217: break;
        case 100: 
          { return CoffeeScriptTokenTypes.UNTIL;
          }
        case 218: break;
        case 89: 
          { yybegin(YYINITIAL);
                                return CoffeeScriptTokenTypes.SPLAT;
          }
        case 219: break;
        case 70: 
          { return CoffeeScriptTokenTypes.IF;
          }
        case 220: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
